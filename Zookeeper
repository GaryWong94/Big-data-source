Zookeeper目的是满足分布式系统的一致性(不同节点对系统内部数据的定义一致)
CAP理论：
C：一致性 集群中所有机器状态是一致的。
A：可用性 客户端访问集群中任意一个节点，总能得到"处理成功"的结果
P：分区容错性 一个分布式系统里面，节点组成的网络本来应该是连通的。然而因为一些故障，有些节点之间不连通了，整个网络就分成了几块区域。
             数据就散布在了这些不连通的区域中。这就叫分区。


CAP理论的解释：
  当你一个数据项只在一个节点中保存，那么分区出现后，和这个节点不连通的部分就访问不到这个数据了。
  这时分区就是无法容忍的。提高分区容忍性的办法就是一个数据项复制到多个节点上，那么出现分区之后，这一数据项就可能分布到各个区里。容忍性就提高了。
  然而，要把数据复制到多个节点，就会带来一致性的问题，就是多个节点上面的数据可能是不一致的。要保证一致，每次写操作就都要等待全部节点写成功，而这等待又会带来可用性的问题。
  总的来说就是，数据存在的节点越多，分区容忍性越高，但要复制更新的数据就越多，一致性就越难保证。为了保证一致性，更新所有节点数据所需要的时间就越长，可用性就会降低。

一致性模型：
弱一致性：最终是一致的 DNS Gossip(Cassandra)
强一致性：
  算法：
    主从同步(等所有的子节点都完成，再返回  问题：一个节点失败 master就阻塞 可用性低)
    多数派(写入和读取时候，对至少多数的进行操作 问题：高并发时，没考虑顺序，结果会不一样)
    Paxos： Basic Paxos, 包括client proposer acceptor learner 四步走：
      client提 
      prepare: proposer提N的编号 
      promise: Acceptor:N是目前最大的，多数派则promise
      accept: 
