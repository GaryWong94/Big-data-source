HBase

---------------------------------------------------------------------------------------------------------------

Hbase是分布式、面向列的开源数据库（其实准确的说是面向列族）。

HDFS为Hbase提供可靠的底层数据存储服务，MapReduce为Hbase提供高性能的计算能力，Zookeeper为Hbase提供稳定服务和Failover机制。
因此我们说Hbase是一个通过大量廉价的机器解决海量数据的高速存储和读取的分布式数据库解决方案。

NoSQL产生原因：(1) 对于特定查询，不是所有值都必须，尤其OLAP中，因此可以减少IO
                 (2) 列的数据是类似的，便于压缩
                 (3) 数据越来越多，join之类的查询操作越来越慢，最后放弃辅助索引，只使用主键进行查询

五大特点：
  1.列式储存：
    这里的列式存储其实说的是列族存储，Hbase是根据列族来存储数据的。列族下面可以有非常多的列，列族在创建表的时候就必须指定。
    与RDBMS的对比：
      数据类型：字符串          丰富的数据
      数据操作：简单增删改查     丰富SQL
      存储模式：列存储          行存储
      

  2.海量储存 
    Hbase适合存储PB级别的海量数据，在PB级别的数据以及采用廉价PC存储的情况下，能在几十到百毫秒内返回数据。
    这与Hbase的极易扩展性息息相关。正式因为Hbase良好的扩展性，才为海量数据的存储提供了便利。

  3.易扩展 
    Hbase的扩展性主要体现在两个方面，一个是基于上层处理能力（RegionServer）的扩展，一个是基于存储的扩展（HDFS）。
    通过横向添加RegionSever的机器，进行水平扩展，提升Hbase上层的处理能力，提升Hbsae服务更多Region的能力。

    备注：RegionServer的作用是管理region、承接业务的访问，这个后面会详细的介绍通过横向添加Datanode的机器，进行存储层扩容，提升Hbase的数据存储能力和提升后端存储的读写能力。

  4.高并发 
  由于目前大部分使用Hbase的架构，都是采用的廉价PC，因此单个IO的延迟其实并不小，一般在几十到上百ms之间。
  这里说的高并发，主要是在并发的情况下，Hbase的单个IO延迟下降并不多。能获得高并发、低延迟的服务。

  5.稀疏
    稀疏主要是针对Hbase列的灵活性，在列族中，你可以指定任意多的列，在列数据为空的情况下，是不会占用存储空间的。

---------------------------------------------------------------------------------------------------------------

概念：
  1. column family：以列为单位聚合数据
        列族：列的家族，数量最好<=3
        
  2. Rowkey: Rowkey相当于mysql中的主键，Hbase使用Rowkey来唯一的区分某一行的数据。
      由于Hbase只支持3种查询方式：(1) 基于Rowkey的单行查询 (2) 基于Rowkey的范围扫描  (3) 全表扫描
      因此Rowkey设计很重要
      
  3. Region：相当于分区，将Rowkey按照范围划入不同的Region中，因此即使数据量很大，访问时延也很低
  
  4. TimeStamp: 实现HBase多版本，标识同一个Rowkey对应的不同版本的数据
      不指定会默认添加，相同Rowkey按照TimeStamp的倒序排列
      
  HBase架构如下：
    ![image](https://github.com/GaryWong94/Big-data-source/blob/master/pic/1506395765370_9254_1506395767893.png)



参考：
https://cloud.tencent.com/developer/article/1006043
https://cloud.tencent.com/developer/article/1006044
