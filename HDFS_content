HDFS特点： 以流式访问模式来存储超大文件
  缺陷：
  1. 因为文件很大，读取整个文件的时间延迟比读取第一条记录的时间延迟重要
  2. 高吞吐，高时延
  3. 不适合大量的小文件：namenode在内存中存文件系统的元数据，因此文件系统可以存的文件受限于namenode的内存总量

HDFS概念：
  磁盘块512字节，HDFS 一个block = 128MB 原因： 使寻找地址的时间远小于传输的时间。
  但是不能太大：一个map任务一次只能处理一个block，block size太大了导致任务数少，并发度低
  
  抽象的好处：1.可以存超级大文件，只要分block就可以了。 
             2.简化存储子系统的设计。 
             3.块设计可以提供容错，提高可用性。
  
  namenode和datanode:
  namenode: 管理文件系统树和树里所有的文件和目录， 记录每个文件中block的datanode信息，但是不记block的位置(根据系统启动时datanode信息重建)。
            namenode在内存中存每个文件和每个block的关系，如果内存不够，可以用多个namenode，
              一个namenode管理一部分的文件(每个namenode管理一部分namespace)，datanode需要注册到所有的namenode
  client: 客户通过与namenode与datanode的交互来访问整个文件系统
  datanode: 工作节点 存储或检索block(受namenode/client调度)，定期向namenode发送它存的block的list
            可以进行块缓存：一般都存在硬盘，如果需要的话，可以把块存在内存中，比如当join时，缓存一个小的list就很大提高性能。
  
  容错：namenode不能毁坏，毁坏了不知道文件存在哪里。
  两种方法： 1. 备份 文件系统中，元数据持久状态的文件 到多个文件系统。
            2. 辅助namenode，有和namenode一样的东西，但是慢一拍
            3. namenode失效后，启动太慢了。Hadoop2中，配置active-standby namenode，活动namenode失效时，接管工作(包括上一条辅助namenode的工作)
                需要下列条件：
                (1) namenode有编辑日志的共享，可以马上接手并操作。
                (2) datanode需要同时向两个namenode发送block处理报告(因为block的映射信息存在内存而不是硬盘)
                (3) client需要特定机制处理namenode的失效问题
                (使用了Zookeeper)
            失效后的操作：
                备用namenode迅速接管工作：最新的状态在内存中(包括编辑日志和最新的信息)
  
写入文件：
  (1) client 对 分布式文件系统调用create来新建文件， 文件系统对namenode创建调用，在namespace中新建一个文件(没有数据块)。
  (2) 此时检查文件不存在且client有写的功能，创建record or 抛出异常。
  (3) 客户端开始写入数据，把数据变成stream：data queue，DataStreamer要求namenode为其分配block(位于datanode中)，将数据包流式传输到datanode，再到其他datanode(复本)
  (4) namenode注意到副本数量不够，开始复制复本直到满足
  
  
保持均衡： 保持平衡：尽量不在同一机架放所有复本，考虑 可靠性/写入带宽/读取带宽。

两个HDFS集群间传输： distcp

HDFS在hadoop3.0中：
  Erasure coding：
  采用纠删码来恢复，只需要占用1.5倍的内存值

  参考：https://www.edureka.co/blog/hadoop-3/#ErasureEncoding
